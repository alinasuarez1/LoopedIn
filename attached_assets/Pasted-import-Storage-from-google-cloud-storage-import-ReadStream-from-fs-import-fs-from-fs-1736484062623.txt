import { Storage } from '@google-cloud/storage';
import { ReadStream } from 'fs';
import fs from 'fs';
import path from 'path';

// Read and parse the credentials file
const credentialsPath = path.join(process.cwd(), 'attached_assets', 'loopedin-446520-c3e0d129ffce.json');
const credentials = JSON.parse(fs.readFileSync(credentialsPath, 'utf-8'));

// Initialize storage with credentials from file
const storage = new Storage({
  projectId: process.env.GOOGLE_CLOUD_PROJECT_ID,
  credentials
});

const bucketName = 'loopedin-media';
let bucket = storage.bucket(bucketName);

export async function uploadMedia(
  mediaBuffer: Buffer | ReadStream,
  mimeType: string
): Promise<string> {
  try {
    // Create a unique filename
    const filename = `${Date.now()}-${Math.random().toString(36).substring(7)}`;
    const file = bucket.file(`media/${filename}`);

    // Upload the file
    await new Promise((resolve, reject) => {
      const stream = file.createWriteStream({
        metadata: {
          contentType: mimeType,
        },
        resumable: false
      });

      stream.on('error', (err) => reject(err));
      stream.on('finish', () => resolve(true));

      if (mediaBuffer instanceof ReadStream) {
        mediaBuffer.pipe(stream);
      } else {
        stream.end(mediaBuffer);
      }
    });

    // Make the file publicly accessible
    await file.makePublic();

    // Return the public URL
    return `https://storage.googleapis.com/${bucketName}/media/${filename}`;
  } catch (error) {
    console.error('Error uploading to Google Cloud Storage:', error);
    throw new Error('Failed to upload media to storage');
  }
}

// Initialize the bucket if it doesn't exist
export async function initializeStorage() {
  try {
    const [exists] = await bucket.exists();
    if (!exists) {
      console.log('Creating storage bucket:', bucketName);
      [bucket] = await storage.createBucket(bucketName, {
        location: 'US',
        storageClass: 'STANDARD'
      });
    }
    console.log('Storage initialized successfully');
  } catch (error) {
    console.error('Error initializing storage:', error);
    throw error;
  }
}